{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","city","country","temp","humidity","wind","pressure","sunrise","sunset","error","API_KEY","App","state","undefined","gettingWeather","event","a","preventDefault","target","elements","value","fetch","api_url","json","data","console","log","cod","sunrise_date","time","ms","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","sys","sunset_date","setState","main","speed","id","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d37da855.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => (\r\n  <div>\r\n    <h1>Погодное приложение</h1>\r\n    <p>Узнайте погоду в вашем городе</p>\r\n  </div>\r\n);\r\n\r\nexport default Info;\r\n","import React from \"react\";\r\n\r\nconst Form = (props) => (\r\n  <form onSubmit={props.weatherMethod}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"Введите город\" />\r\n    <button>Получить погоду</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = (props) => (\r\n  <div className=\"infoWeath\">\r\n    {props.city && (\r\n      <div>\r\n        <p>\r\n          <b>Местоположение: </b>\r\n          {props.city}, {props.country}\r\n        </p>\r\n        <p>\r\n          <b>Температура:</b> {props.temp} °C\r\n        </p>\r\n        <p>\r\n          <b>Влажность:</b> {props.humidity}%\r\n        </p>\r\n        <p>\r\n          <b>Скорость ветра:</b> {props.wind} м/с\r\n        </p>\r\n        <p>\r\n          <b>Давление:</b> {props.pressure} мм\r\n        </p>\r\n        <p>\r\n          <b>Восход солнца:</b> {props.sunrise}\r\n        </p>\r\n        <p>\r\n          <b>Заход солнца</b>: {props.sunset}\r\n        </p>\r\n      </div>\r\n    )}\r\n    <p className=\"error\">{props.error}</p>\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport Info from \"./components/info\";\r\nimport Form from \"./components/form\";\r\nimport Weather from \"./components/weather\";\r\n\r\nconst API_KEY = \"b4c0f6c114ccc464a1e5cf48308a418e\";\r\nclass App extends React.Component {\r\n  state = {\r\n    temp: undefined,\r\n    humidity: undefined,\r\n    wind: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    sunrise: undefined,\r\n    sunset: undefined,\r\n    pressure: undefined,\r\n    error: undefined,\r\n  };\r\n\r\n  gettingWeather = async (event) => {\r\n    event.preventDefault();\r\n    const city = event.target.elements.city.value;\r\n\r\n    if (city) {\r\n      const api_url = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${API_KEY}`\r\n      );\r\n      const data = await api_url.json();\r\n      console.log(data);\r\n\r\n      if (data.cod === 200) {\r\n        const time = (ms) => {\r\n          var date = new Date(ms * 1000);\r\n          var hours = date.getHours();\r\n          var minutes = \"0\" + date.getMinutes();\r\n          var seconds = \"0\" + date.getSeconds();\r\n          return hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2);\r\n        };\r\n        var sunrise_date = time(data.sys.sunrise);\r\n        var sunset_date = time(data.sys.sunset);\r\n\r\n        this.setState({\r\n          temp: data.main.temp,\r\n          humidity: data.main.humidity,\r\n          wind: data.wind.speed,\r\n          city: data.name,\r\n          country: data.sys.country,\r\n          sunrise: sunrise_date,\r\n          sunset: sunset_date,\r\n          pressure: data.main.pressure,\r\n          error: undefined,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          temp: undefined,\r\n          humidity: undefined,\r\n          wind: undefined,\r\n          city: undefined,\r\n          country: undefined,\r\n          sunrise: undefined,\r\n          sunset: undefined,\r\n          pressure: undefined,\r\n          error: \"Неверное название города!\",\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        temp: undefined,\r\n        humidity: undefined,\r\n        wind: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        sunrise: undefined,\r\n        sunset: undefined,\r\n        pressure: undefined,\r\n        error: \"Введите название города!\",\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"main\">\r\n        <div className=\"info\">\r\n          <Info />\r\n        </div>\r\n        <div className=\"form\">\r\n          <Form weatherMethod={this.gettingWeather} />\r\n          <div className=\"weather\">\r\n            <Weather\r\n              temp={this.state.temp}\r\n              humidity={this.state.humidity}\r\n              wind={this.state.wind}\r\n              city={this.state.city}\r\n              country={this.state.country}\r\n              sunrise={this.state.sunrise}\r\n              sunset={this.state.sunset}\r\n              pressure={this.state.pressure}\r\n              error={this.state.error}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}