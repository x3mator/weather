{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","city","country","temp","pressure","sunrise","sunset","error","API_KEY","App","state","undefined","gettingWeather","event","a","preventDefault","target","elements","value","fetch","api_url","json","data","console","log","cod","sunrise_date","time","ms","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","sys","sunset_date","setState","main","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d504f23.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => (\r\n  <div>\r\n    <h2>Погодное приложение</h2>\r\n    <p>Узнайте погоду в вашем городе</p>\r\n  </div>\r\n);\r\n\r\nexport default Info;\r\n","import React from \"react\";\r\n\r\nconst Form = (props) => (\r\n  <form onSubmit={props.weatherMethod}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"Город\" />\r\n    <button>Получить погоду</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = (props) => (\r\n  <div className=\"infoWeath\">\r\n    {props.city && (\r\n      <div>\r\n        <p>\r\n          Местоположение: {props.city}, {props.country}\r\n        </p>\r\n        <p>Температура: {props.temp} °C</p>\r\n        <p>Давление: {props.pressure}</p>\r\n        <p>Восход солнца: {props.sunrise}</p>\r\n        <p>Заход солнца: {props.sunset}</p>\r\n      </div>\r\n    )}\r\n    <p className=\"error\">{props.error}</p>\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport Info from \"./components/info\";\r\nimport Form from \"./components/form\";\r\nimport Weather from \"./components/weather\";\r\n\r\nconst API_KEY = \"b4c0f6c114ccc464a1e5cf48308a418e\";\r\nclass App extends React.Component {\r\n  state = {\r\n    temp: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    sunrise: undefined,\r\n    sunset: undefined,\r\n    pressure: undefined,\r\n    error: undefined,\r\n  };\r\n\r\n  gettingWeather = async (event) => {\r\n    event.preventDefault();\r\n    const city = event.target.elements.city.value;\r\n\r\n    if (city) {\r\n      const api_url = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${API_KEY}`\r\n      );\r\n      const data = await api_url.json();\r\n      console.log(data);\r\n\r\n      if (data.cod === 200) {\r\n        const time = (ms) => {\r\n          var date = new Date(ms * 1000);\r\n          var hours = date.getHours();\r\n          var minutes = \"0\" + date.getMinutes();\r\n          var seconds = \"0\" + date.getSeconds();\r\n          return hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2);\r\n        };\r\n        var sunrise_date = time(data.sys.sunrise);\r\n        var sunset_date = time(data.sys.sunset);\r\n\r\n        this.setState({\r\n          temp: data.main.temp,\r\n          city: data.name,\r\n          country: data.sys.country,\r\n          sunrise: sunrise_date,\r\n          sunset: sunset_date,\r\n          pressure: data.main.pressure,\r\n          error: undefined,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          temp: undefined,\r\n          city: undefined,\r\n          country: undefined,\r\n          sunrise: undefined,\r\n          sunset: undefined,\r\n          pressure: undefined,\r\n          error: \"Неверное название города!\",\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        temp: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        sunrise: undefined,\r\n        sunset: undefined,\r\n        pressure: undefined,\r\n        error: \"Введите название города!\",\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"main\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-sm-6 col-md-4 col-lg-6 info\">\r\n                <Info />\r\n              </div>\r\n              <div className=\"col-sm-6 col-md-4 col-lg-6 form\">\r\n                <Form weatherMethod={this.gettingWeather} />\r\n                <div className=\"col-sm-6 col-md-4 col-lg-6\">\r\n                  <Weather\r\n                    temp={this.state.temp}\r\n                    city={this.state.city}\r\n                    country={this.state.country}\r\n                    sunrise={this.state.sunrise}\r\n                    sunset={this.state.sunset}\r\n                    pressure={this.state.pressure}\r\n                    error={this.state.error}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}